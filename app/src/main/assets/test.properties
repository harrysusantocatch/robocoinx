public static void main(String[] args) throws IOException, URISyntaxException {
//        getView();
File file = new File("src/com/test/home.html");
Document doc = Jsoup.parse(file, "UTF-8");
String csrfToken = "PTKVe6AP5hmX"; // get from cookies
String op = "free_play";
String fingerprint = "";
String clientSeed = "";
String fingerprint2 = "";
String pwc = "";
String tokenName = "";
String tokenValue = "";
String lastParam = "";
String lastParamValue = "";


Elements scripts = doc.getElementsByTag("script");
for (Element script: scripts) {
List<DataNode> dataNodes = script.dataNodes();
for (DataNode dataNode : dataNodes){
String data = dataNode.getWholeData();
if(data.contains("token_name")){
// token name
String[] dataSplit = data.split(";");
String varTokenName = dataSplit[1];
String[] tokenNameSplit = varTokenName.split(" ");
tokenName = tokenNameSplit[3].replace("'", "");

// last param
String varLastParam = dataSplit[2];
String[] lastParamSPlit = varLastParam.split(" ");
lastParam = lastParamSPlit[3].replace("'", "");

}
if(data.contains("#"+tokenName)){
// token value
String regex = "\\(\"#"+tokenName+"\"\\).val\\(\"\\d*:[A-Za-z0-9]*";
Pattern pattern = Pattern.compile(regex);
Matcher matcher = pattern.matcher(data);
if(matcher.find()){
tokenValue = matcher.group();
String strReplace = "(\"#"+tokenName+"\").val(\"";
tokenValue = tokenValue.replace(strReplace, "");
}
}
}
}
clientSeed = getCLientSeed();
//        Connection.Response lastParamValueResponse = getLastParamValueResponse(lastParam, csrfToken);
//        lastParamValue = getSha256Hex(lastParamValueResponse.body());
System.out.println("op : "+op);
System.out.println("fingerprint : "+fingerprint+"=e42ec4eecaaeb910ba4a91f14f029902");
System.out.println("clientSeed : "+clientSeed);
System.out.println("fingerprint2 : "+fingerprint2+"=1149863222");
System.out.println("pwc : "+pwc);
System.out.println(tokenName.equalsIgnoreCase("c12433d9d9cb"));
System.out.println(tokenValue.equalsIgnoreCase("1569478460:1366dd09aa7e18080ce65906d31084893601b557caf71509226298a2fd6069b6"));
System.out.println(lastParam.equalsIgnoreCase("1f3d673e4623"));
System.out.println(lastParamValue.equalsIgnoreCase("4b0567448554e98d34130c9f13e590a532af45ca36ec00d6778caa5febe67f02")+" = "+lastParamValue);

}

private static String getCLientSeed(){
String charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
String randomString = "";
for (int i = 0; i < 16; i++) {
int randomPoz = (int) Math.floor(Math.random() * charSet.length());
randomString += charSet.substring(randomPoz, randomPoz + 1);
}
return randomString;
}
// https://freebitco.in/cgi-bin/fp_check.pl?s=1f3d673e4623&csrf_token=PTKVe6AP5hmX
private static Connection.Response getLastParamValueResponse(String lastParam, String csrfToken) throws IOException {
String url = "https://freebitco.in/cgi-bin/fp_check.pl?s="+lastParam+"&csrf_token="+csrfToken;
Connection.Response response = Jsoup.connect(url)
.userAgent(StaticValues.USER_AGENT)
.header("Access-Control-Allow-Credentials", "true")
.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept")
.timeout(StaticValues.TIMEOUT)
.method(Connection.Method.GET)
.execute();
return  response;
}

private static String getSha256Hex(String text){
String shaHex = "";
try {
MessageDigest md = MessageDigest.getInstance("SHA-256");

md.update(text.getBytes("UTF-8"));
byte[] digest = md.digest();

shaHex = DatatypeConverter.printHexBinary(digest);
} catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
ex.printStackTrace();
}
return shaHex.toLowerCase();
}

https://stackoverflow.com/questions/29127429/get-the-value-of-a-javascript-variable-with-java

InputStream inputStream = getAssets().open("home.html");
Document document = Jsoup.parse(inputStream, "UTF-8", "");
ProfileView x = new ProfileView(document);
System.out.println(x);

TODO
disable LTr
reedem bonus & RP

Request URL: https://www.google.com/recaptcha/api2/reload?k=6LeGfGIUAAAAAEyUovGUehv82L-IdNRusaYFEm5b
Request Method: POST
Status Code: 200 
Remote Address: 216.239.38.120:443
Referrer Policy: no-referrer-when-downgrade

respon header:
alt-svc: quic=":443"; ma=2592000; v="46,43",h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000
cache-control: private, max-age=0
content-encoding: gzip
content-length: 9590
content-type: application/json; charset=utf-8
date: Thu, 31 Oct 2019 22:21:00 GMT
expires: Thu, 31 Oct 2019 22:21:00 GMT
server: GSE
set-cookie: SIDCC=AN0-TYvmqyZxvGL1rax2qPeSYZ2jhtTuZr88sidswRp0kqfdls5yQpq2VAHpE0NGZKM9Y37L4mI; expires=Wed, 29-Jan-2020 22:21:00 GMT; path=/; domain=.google.com; priority=high
status: 200
x-content-type-options: nosniff
x-frame-options: SAMEORIGIN
x-xss-protection: 1; mode=block

req header:
:authority: www.google.com
:method: POST
:path: /recaptcha/api2/reload?k=6LeGfGIUAAAAAEyUovGUehv82L-IdNRusaYFEm5b
:scheme: https
accept: */*
accept-encoding: gzip, deflate, br
accept-language: en-US,en;q=0.9
content-length: 4869
content-type: application/x-www-form-urlencoded;charset=UTF-8
cookie: ANID=AHWqTUn3x1KpO89K9TfnNq73FuZFUSTyN56BoemuZA1OyWhbHSpnRlj7n1pi5Re6; SID=pwc_FIN0Wf0pX9nsRnJUfLnky6kRrb9Jh1yvKt1WsNjJ5MhzX2gg30GebURBSvLdjFAcPw.; HSID=Aa59wQhvInvk2GASY; SSID=AGcFdzZXtyoSjZYDh; APISID=YALdINaBg799ehWg/AObctDVpQkCb8um1V; SAPISID=2M720M-57qIogemg/A8aFNBfqbndE-6IlY; NID=190=QVjq5_bg54dQjXWIz519w9V-4wengQ3jGlhwcR68mU-etweHt1wyNx7xdbawSMRIya0Q3GW7XuknfZ58xezHsxl5HEs9Hv3tYL5uJPg7-tdqgoasTYOZQtT54blnrl5phKclSphJOKDNXSLcV5gCzrPFXB02sxtnGvxWyxkuXvUjRv-Vzc1ahx77B6g6sypwpCeGtKIct1OMDO5lsNwR3s9rl5wWT825ZmFxnRAZAGqRWl5GTiQA3pueOOaVXDdrz3T1S8KwTeGEwFJcPIo6yAelXXSD_SHY2zyC4_bSKY9z6pNbw6wBkuI7bWVZ3k6Y36o; 1P_JAR=2019-10-31-00; SIDCC=AN0-TYvLnsfwVRWxvlitLEQ8m3g0MMFyPopYITIBZFCHrb908YtaaJI-Se5QlVjGQmrjLT-oXzc
origin: https://www.google.com
referer: https://www.google.com/recaptcha/api2/bframe?hl=en&v=66WEle60vY1w2WveBS-1ZMFs&k=6LeGfGIUAAAAAEyUovGUehv82L-IdNRusaYFEm5b&cb=tfyym7mmllwz
sec-fetch-mode: cors
sec-fetch-site: same-origin
user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36
x-client-data: CJO2yQEIprbJAQjBtskBCKmdygEI4qjKAQjKr8oBCM6wygEI97TKAQ==

query string:
k: 6LeGfGIUAAAAAEyUovGUehv82L-IdNRusaYFEm5b

form data:
v: 66WEle60vY1w2WveBS-1ZMFs
reason: fi
c: 03AOLTBLTpx_nHhIj_xonHiF3uqj2UQmISbe5rf5n1IBRcCevfkN6Ara1ZCj8YdoTf9PpTWuXQC78dKnV8fuOcWe0FdHQHmlqVWyPQmG1cxjMHYbb5BIoO-DWgguDGZb4x8_q7CjQzdXlSBXjspGpmTlrTLDZaYQg0WFkeWnKVRU_3-3RksQ8JNBVATQ9RWinYY46KGcG2N2c2SVuQdyUsaThq_KkXybBzqQn5gzpoQfAADF8GnYRMsE8GvBwCLF3F1NLqlQf0cPUAyldWxzbQedwxzJ099PQTWS8Bx37pVJ1MeM59KaOzf0KIVrx50q1Wz2XAmmXMSNiD9saYMQkf897CqgLcyt7ug1jhYuaE3G_mKyv1bg_CD4N2rVclNDr-wiC40lIF7i7-U26CrFT1l8JLHHu6M4wxQg
chr: [53,89,59]
vh: -249338112
bg: !bmigaElHJwbQIf_3U-JdQIEv384SxeoHAAABNVcAAADVnAuZogwhkm5p3Yb6nMaFup4a2wk524m_4RF2QBBkm-IE53BO4Jl0g6SBZqCp_3_VZyA2htiFeVEHf_Sta0OhX-2HSFQKtL8lzVAF9e4PlfcEHo0vyDI7C_Z_R5uunvmMdHZESTbDm0GrO7fpdPuP7wLL24mhuAuvwuCox8mTAUM_7UtP9Jgp9yo4SuZIALeJ25dYFGVnJxhmEm9YsLuh6SV_SkKhgoPAZ3dql-RHo-WXw7t58j2cpb4oNYX0Qlf36XVIsOKyCIuXfaLkTpJ1t4B5XsBmp5203QxqlM0nQk1pOncPuVUydyAVQbXoe_agIug9mIHggDgC8ntyPE_zOgSNHSca3AqMs_0mBE6UiDN8O3oL0EQ8FWaVHLWNyVKs-HWiqX8ViOvFue1q-3sLWJHYv1tCmGoltPKdGfz4jIB68b11eyhozJuu6SmABIxXw_i_XQHeWUV4zENoDaCGqeeFBK0kgPml9BIX5CtOgYvk6TO9x-0t0xDUb72UC5CBWH9J2vn2KsMyuQT7-NDHWX-iE8EZKMZL7opnrlEmmrHvJiqLbYSF29nubWIf7o07gWapq0SRKP8HGp85je_bxh9ez8lk2F7jc6PleEXy92KZz_sVw2PYAadw0CdVVmo25EGZeh4b7IZFXuGFwI1rD4-wusiw5AN7JlkHyDhpy-ey1HxcYzes9FQNXc8uZLX8U3FV_3eAou4IqxC2ciLQ_Byb72NwlyBvkTiTbW1v3JHb9FcPHvOWuauVghn_mHl7AXJ_lN-CbhiyfbfWhOxdp_pidQMaVVq12b-zB7W87jwl0cpi-qhq8seqULiy2q2_udHeoT5IfluKq8NuiUcTPBidKM4DTXTHIURhlLIsOQrFk63b6Ha8YtVxj40xNHRH8hYlnnD8Zj-BJotQymcs_wBdS17BXfUuRGXU-a-0KXEu04BWXwtFO0QGibhjGA_vbEV8rb6VRhACo9D94IDi4zpQuj-D1I5maIrXQF4rbzu-wqxthZICwkewPcrCPD-ZaPYxcykDYBVpeudAZeYLis2y6F2ipMINJVFj5F3m2X-vkeE09KQS3eFefp3lkbbZv27poCR8cs6U__pVAX_S3vgvmj-4i9vRzJCj0VZjG0W1GbLbleQj1CjyQxjr6impLBF1oMwqzPZXwImsiA0oYRCnG4TyYKKhtg7Zn7twT0shRjFCsAUBJ-OwUTX9DMirh-r32j85H6EsQKjcpqJSPE3z7YIgb0oYyFawopuQfScyH0Q0ZPGLo4Ac3zgUOurrXADij3pkd16mghLNUVTCR-kQasv6L1fQZT7YEFv7cOdugDDt8fhfw1JFDpKGf1DyRgNFxlQIak2HdUfQ5CHlTOYcM5m0ajYf6x9EE9mDaEE1L7aN6NTbAxrkxa4mLRrkj0yqZ8TSu7r3IIByU5p4EQv5XJqSyZpUMSya83geGCr-xp1hABjfpb16Y_NCrBJ8CvIz_g6UD5u1TIywsXYLJh8zf_eYAifSZWG-iLvP1p1PAIBNQCiE2GrIu1BP4tC1MHmwnD0oDnuvzOaiaarKokOx3KQzU5kJt5HKtZhmoi7QgZUZ-BFgcAkXGguEXy8XI_M49dTkERm7tTaQow8sViQceLlEoyiMr5Fl8GeJDO1CYEJhy1puHz8MbA58jvI9YGe3r2MuheZDFmdiCoNh9teuxS6_RduShbeWYtJsu_KlnYL5S4JkZ1c7PXIdMHTgcfzC30k2uerjNVj9hd2VaI2rETqaSQNT0ncgrxuooXpLeOi7yL60Xvd06rjvN8El1dh7hh3HYq0XJbL6sXdLjF1E1OuhWZLCdRg3lq3VjViJKyQDXxqCAukPEFBHakZIAnXyiecOwIdsSqQOviNaaGW-0h3xGykmWyyRsHjJj32y4XQCFO1VqcXsWtOnk0S-IdgLTcoONRczc-RVPbs4PqR1Y1EzXhxgsgpcsSjuScRsOf88ZtBf2dExGH7mbP9ixijV-QQMshxmkWXTfXZGKTqJTo1nqdzNUzYgOh4dCAJaxycpIqwjHxmvWvM_IgoGxtLb-PQB0dDZKDFBlZqMiIAkkyN5pKbKoqN9SvEm0ArJ8q3HHzmbsar3zXIX7DDN7bsT_XcPd3SGks31ZXlSy1cvIyV4MeeLFKRXi6mKwD5XSKPX_8lCcQQjcc3fu2hG2afTI2RCb6sv7fBTq_j34eSGnRyC55jnAOKVlHUZ-5nSsbRdGgHi4Y2Bj5rDgesAH2ndtfgGx8I71eOrXPnjX2LDVUtbJt-UmiTjrj9oZCB0O9t2eMbtrl3b_UYKZa8kife4RhTv9O2rfc0ox73mUJ_YE6JqE3ola2lq9jqX6QSU-EnYJzFkKVCLF_8DzCwgd5Ywj1dZbytoXnhgKcicq4W1RgfIYQT1EQWvEV5SuAJeaLiYJuRcsjpuJkftEZvXfngCsiBsi_gEzWdmORXvcoM9_7W_xAI9JoMuMFpe37NZ5KDjHpJ0n9qsukyAU6dLnQqzHakGfWHEs9nDgyg_UBqCHIBM_ZFbxKDbujb3P1L2LPE-Aj4w1Y3_UHaM9DhBSSUJwvCnIwuX0Q3WYmTQKyF3tjQCDywNj6FCD3hXAz58kD9YlXex3wX6PCkz10DAAUem8LVgpJHvWxfZ5V5n9ttOwrY_W6HQlGNkazesjKYqi0sn87QNLfZalXvrkwdV9rE4HpW_TOZruDYPXjFpIHoDEKnrLlWdnOToy04bC-s1z-lTJbJjSmzUgYFPTqv1Q9BWHlFz8R8CUsa7KSXP-nB3P_Nvx7A4eIJNdnfUl5g_UK0yi-ZAPDyp3594PXDWBeCd5qjoCcxPyGt_fBb1POO9ZGMnIb0zJIwnolnB5V9NXDmDoFwgepQ-txmzaqTONHBuN_SUAkMHbmfSTFn6KKhNBSAcexMIfJOl8G70MZ088cJZGJS9KD13GAA3sGGg34rnHja3yhuHfIG9sFmSEwV0PXuQly0m86-XJiNmYT-X0hTvcvzR9KIig34NttxQDMNMGAk41eQDpGRVK5RiiLHBy5MSUnBhb0QtvZgHF0RsK1aiQTQm3povKAfMHPT9ncd6NDpUojqkGP7baKxGUobVTyUR9gXnLM2kEewL3R0c-0HmHO-uCBT_UYkQtWgtVgD2qFPAy5HTp6Q9UWREoFAeuYn6_Fx0sLjxk9yy2cehTVtywIOa9L3pmoZfD3QYjZKXOpg2k3IDcft5v4Uur8QX8Chp7CdRgNlvBJi84fvFlSFkn3sGftwmtDm3NlV3tbsa1qexWaW-lHfpXA4bSWsDDG5aE0vr-znPePEHz47xRFVChLheQ4hSjzB6KU6J87vNq29WrZ1tiN_1LcIqLjT6QyPp_dc13Fp_EQS0WJKKRfsijapDGf1MC7vwl32PXtqvaXgrEyoAyYLqYiA-Mldc5GvRFyRKDmy1iK8-f_5dJ0Oggmk3c6dvUHkZE0Mv0sQWJMfFldV8T50-OBdmye_c0lALADZtLcNvxskQIkMRPO6Qm_xS9eRHHbCW2xBOS-c7V0imnwkcK8bYS7DToP36kaMJiTC8oviHXFdPmWEi9NK3r0YpFpbv_BKxJHY9ZPVOZ8_3ACZ3SJXca9nrJwsxRq-eAjXvj__YGEMKMhHlkZ9p-ClTLAXh6xmtOB61-HboqORPDM3XQh7sn0yL3VKixNmXPNn5U5iJdT4YbMXfuXucBoT8pxqfyuaEeGXh5lQ29hyRYXWJfnLvKEq1rSsY75b00nQOiJ-QR5WB7y8e1VVgK9JuXCVg1GPXRdtKdYqv-nELrz5QVaDtkkDbm0VMp3o2ZRQ0HvaGQ6r2tM6SLVKEtb8ig35OF7fEruqzX8oCQt4y-aD0fMwsqjYJfgdlAPERngF73Izh21pBeba80M3o9nEmY6zHon-ZZcXG6IfDNKyVS0h27rAtr0sUWlVR7zLk41EMQdreoWZIJhdfB5nUlMscncm1J4Y
z: 05AHVohkbRfiUV5iPb4rf9kDXiroqHkJcjgiASEsfRKBSyKKImKSmgV6U-UpeqhS_j4PBW0rTUQ14iJ4WHXDceIQ6_XW5JplhIwd2Q4jkUFS4_RYf9FWbltVqv6NC4Gj6LrKLY2ITvCWa1gcHyanHYEq5_xdNeNOXAI9ltW_ko9org3lbCD6N10Mrkw_xwmivTPLgBT4AOt82dGgYbbk7rfwOlfXhWXhnXnowkJhFQnBGmNzQqXFwfi60SB3lvHKO8UqAB5jk2yau6NSzqtcIvux3HR5Exm8M8Z4wNAyaFrNJF_JUrZAclkbIrETXqyV_e12sgTCawOlYCv9-aOKq6x8HPAbJ78a6nHyaE
